import json

from langchain_core.messages import ToolMessage

from gamer.utils.models import(
    code_generator_agent,
    python_execute_agent,
    script_reformat_agent
)
from gamer.utils.prompts.python_executor import (
    get_python_excecute_prompt
    )
from gamer.utils.prompts.reformat_python import (
    get_reformat_python_prompt
    )
from gamer.utils.prompts.python_formatter import (
    get_python_format_prompt
    )
from gamer.utils.tools import python_execute_tools

async def python_formatter(state:dict):
    query = state['query']
    schema_context = state.get('schema_context', [])
    python_code = state.get(
        "python_code", 
        "No code has been generated yet"
        )
    python_code_response = state.get(
        "python_code_response",
        " "
    )

    prompt = get_python_format_prompt(
        python_code_response=python_code_response,
        python_code=python_code,
        schema_context=schema_context,
        query=query
    )
    answer = await code_generator_agent.ainvoke(
        prompt
        )
    python_code = answer['python_code']
    return {"messages": [python_code],
            "python_code": python_code, 
            "generation": python_code} 

def should_execute(state: dict):
    route = state["code_or_query"]

    if route == "python_script_execute":
        return "continue" 
    # Otherwise if there is, we continue
    else:
        return "end"

async def python_executor(state: dict):
    python_code = state.get(
        "python_code", 
        "No code has been generated yet"
        )
    python_code_response = state.get(
        "python_code_response", 
        "There was no response generated by the script"
        )
    python_execute_count = state.get("python_execute_count", 0)

    python_execute_prompt = get_python_excecute_prompt(
        python_code=python_code,
        python_code_response=python_code_response,
        python_execute_count=python_execute_count
        )
    
    try:

        response = await python_execute_agent.ainvoke(
            python_execute_prompt
        )

        # reformat_code = response['reformat_code']
        # agent_reply = response['summary']

        if not response.tool_calls:
            return {"messages": [response], "generation": response}
        
    except Exception as e:
        response = e
    
    return {"messages": [response], "generation": response}


async def run_python_script(state: dict):
    """
    Retrieving information from MongoDB with tools
    """

    tool_call_count = state.get("python_execute_count", 0) + 1
    tools_by_name = {tool.name: tool for tool in python_execute_tools}

    outputs = []



    for i, tool_call in enumerate(state["messages"][-1].tool_calls):
        try:
            tool_result = await tools_by_name[tool_call["name"]].ainvoke(
                tool_call["args"]
            )

            content = json.dumps(tool_result)
        except Exception as e:
            content = e

        outputs.append(
            ToolMessage(
                content=content,
                name=tool_call["name"],
                tool_call_id=tool_call["id"],
            )
        )
    
    return {
        "messages": outputs,
        "python_code_response": content,
        "python_execute_count": tool_call_count
    }

def should_continue_python_run(state):
    messages = state["messages"]
    last_message = messages[-1]
    python_execute_count = state.get("python_execute_count", 0)

    if not last_message.tool_calls:
        return "end"
    elif python_execute_count > 2:
        return "end"
    else:
        return "continue"

async def should_reformat(state):

    python_code = state["python_code"]
    python_code_response = state.get(
        "python_code_response", 
        "There was no response generated by the script"
        )
    query = state['query']
    python_execute_count = state.get("python_execute_count", 0)

    prompt = get_reformat_python_prompt(
        python_code=python_code,
        python_code_response=python_code_response,
        query = query,
        python_execute_count=python_execute_count
        )
    
    response = await script_reformat_agent.ainvoke(
        prompt
    )

    reformat = response['reformat']
    return reformat
